tasks.withType(JavaCompile) {
    // Ensure the correct lombok.config is used regardless of Gradle's root/module logic
    options.compilerArgs += [
        "-Alombok.config=${projectDir}/lombok.config"
    ]
}
/*
 *  Copyright 2021 Collate
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

plugins {
    id 'antlr'
    id 'io.swagger.core.v3.swagger-gradle-plugin' version '2.2.30'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'application'
    id 'io.freefair.lombok'
}

application {
    mainClass = 'org.openmetadata.service.OpenMetadataApplication'
}

dependencies {
    // Project dependencies
    api project(':common')
    api project(':openmetadata-spec')
    
    // Use shaded JARs explicitly
    api files("${project(':openmetadata-shaded-deps:elasticsearch-deps').buildDir}/libs/elasticsearch-deps-${version}.jar") {
        builtBy ':openmetadata-shaded-deps:elasticsearch-deps:shadowJar'
        builtBy ':openmetadata-shaded-deps:elasticsearch-deps:jar'
    }
    api files("${project(':openmetadata-shaded-deps:opensearch-deps').buildDir}/libs/opensearch-deps-${version}.jar") {
        builtBy ':openmetadata-shaded-deps:opensearch-deps:shadowJar'
        builtBy ':openmetadata-shaded-deps:opensearch-deps:jar'
    }
    
    // BOM imports
    api platform("org.glassfish.jersey:jersey-bom:${jerseyBomVersion}")
    api platform('software.amazon.awssdk:bom:2.22.12')
    api platform('com.google.cloud:libraries-bom:26.49.0')
    
    // Core Dropwizard
    api("io.dropwizard:dropwizard-core:${dropwizardVersion}") {
        exclude group: 'javax.validation', module: 'validation-api'
        exclude group: 'org.hibernate.validator', module: 'hibernate-validator'
        exclude group: 'jakarta.validation', module: 'jakarta.validation-api'
    }
    api "io.dropwizard:dropwizard-assets:${dropwizardVersion}"
    api "io.dropwizard:dropwizard-jdbi3:${dropwizardJdbi3Version}"
    api "io.dropwizard:dropwizard-metrics:${dropwizardVersion}"
    api "io.dropwizard:dropwizard-json-logging:${dropwizardVersion}"
    
    // Database
    api "org.jdbi:jdbi3-sqlobject:${jdbi3Version}"
    api "org.apache.tomcat:tomcat-jdbc:${tomcatJdbcVersion}"
    api "com.mysql:mysql-connector-j:${mysqlConnectorVersion}"
    api "org.postgresql:postgresql:${postgresConnectorVersion}"
    api "org.flywaydb:flyway-maven-plugin:${flywayVersion}"
    api "org.flywaydb:flyway-mysql:${flywayVersion}"
    
    // Security & Authentication
    api("org.pac4j:pac4j-core:${pac4jVersion}") {
        exclude group: 'org.slf4j', module: 'slf4j-api'
        exclude group: 'com.nimbusds', module: 'nimbus-jose-jwt'
    }
    api("org.pac4j:pac4j-oidc:${pac4jVersion}") {
        exclude group: 'net.minidev', module: 'json-smart'
    }
    api 'com.nimbusds:nimbus-jose-jwt:9.42'
    api "net.minidev:json-smart:${jsonSmartVersion}"
    api "com.macasaet.fernet:fernet-java8:${fernetVersion}"
    api "com.auth0:java-jwt:${javaJwtVersion}"
    api "com.auth0:jwks-rsa:${jwksRsaVersion}"
    api "io.jsonwebtoken:jjwt:${jjwtVersion}"
    api "at.favre.lib:bcrypt:${bcryptVersion}"
    api "org.passay:passay:${passayVersion}"
    
    // Validation
    api 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    api 'jakarta.validation:jakarta.validation-api:3.0.2'
    api 'org.glassfish.expressly:expressly:5.0.0'
    api 'org.glassfish:jakarta.el:5.0.0-M1'
    api 'jakarta.el:jakarta.el-api:5.0.1'
    
    // Web & REST
    api "io.swagger.core.v3:swagger-annotations:${openapiswaggerVersion}"
    api 'org.glassfish.jersey.media:jersey-media-multipart'
    api 'org.glassfish.jersey.media:jersey-media-json-jackson'
    api 'org.glassfish.jersey.core:jersey-client'
    api "org.glassfish.jersey.core:jersey-server:${jerseyBomVersion}"
    api "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyBomVersion}"
    api "jakarta.ws.rs:jakarta.ws.rs-api:3.1.0"
    
    // HTTP & Async
    api "org.apache.httpcomponents:httpasyncclient:${httpasyncclientVersion}"
    api "org.eclipse.jetty:jetty-server:${jettyVersion}"
    api "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
    api "org.eclipse.jetty:jetty-http:${jettyVersion}"
    api "org.eclipse.jetty:jetty-io:${jettyVersion}"
    api "org.eclipse.jetty.websocket:websocket-jakarta-server:${jettyVersion}"
    api "org.eclipse.jetty.websocket:websocket-jetty-server:${jettyVersion}"
    api "org.eclipse.jetty.websocket:websocket-jetty-api:${jettyVersion}"
    
    // JSON Processing
    api "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    api "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    api "com.fasterxml.jackson.datatype:jackson-datatype-jsr353:${jacksonVersion}"
    api "com.jayway.jsonpath:json-path:${jsonpathVersion}"
    api "com.github.java-json-tools:json-patch:${jsonPatchVersion}"
    api "com.flipkart.zjsonpatch:zjsonpatch:0.4.16"
    api 'org.json:json:20240303'
    api "com.google.code.gson:gson:${gsonVersion}"
    
    // Utilities
    api "commons-lang:commons-lang:2.6"
    api "commons-io:commons-io:${commonsIoVersion}"
    api "commons-cli:commons-cli:${commonsCliVersion}"
    api "org.apache.commons:commons-csv:1.12.0"
    api "com.opencsv:opencsv:5.9"
    api "info.picocli:picocli:${picocliVersion}"
    api 'io.github.classgraph:classgraph:4.8.177'
    api 'org.reflections:reflections:0.9.11'
    api "com.google.guava:guava:33.3.1-jre"
    
    // Logging
    api "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    api "ch.qos.logback:logback-core:${logbackCoreVersion}"
    api "ch.qos.logback:logback-classic:${logbackClassicVersion}"
    api "ch.qos.logback:logback-access:${logbackClassicVersion}"
    
    // Cloud Services
    api 'software.amazon.awssdk:secretsmanager'
    api 'software.amazon.awssdk:ssm'
    api 'software.amazon.awssdk:rds'
    api 'software.amazon.awssdk:sts'
    api 'software.amazon.awssdk:cloudwatch'
    api 'software.amazon.awssdk:aws-core'
    api 'software.amazon.awssdk:apache-client'
    api 'software.amazon.awssdk:auth'
    
    api "com.azure:azure-security-keyvault-secrets:${azureKvVersion}"
    api "com.azure:azure-identity:${azureIdentityVersion}"
    api "com.azure:azure-identity-extensions:${azureIdentityExtensionsVersion}"
    api "com.microsoft.azure:msal4j"
    
    api 'com.google.cloud:google-cloud-secretmanager'
    
    // Monitoring & Metrics
    api 'io.prometheus:prometheus-metrics-instrumentation-dropwizard:1.3.6'
    api 'io.prometheus:simpleclient:0.16.0'
    api 'io.prometheus:simpleclient_dropwizard:0.16.0'
    api 'io.micrometer:micrometer-observation:1.14.5'
    api 'io.micrometer:micrometer-registry-prometheus:1.14.5'
    api 'io.micrometer:micrometer-core:1.14.5'
    api 'io.dropwizard.metrics:metrics-core:4.2.19'
    
    // Template Engine
    api "org.freemarker:freemarker:${freemarkerVersion}"
    
    // Communication
    api "org.simplejavamail:simple-java-mail:${simplejavaMailVersion}"
    api 'com.slack.api:bolt-servlet:1.44.1'
    api 'com.slack.api:slack-api-client:1.44.1'
    api "io.socket:socket.io-client:${socketIoClientVersion}"
    api 'io.socket:socket.io-server:4.0.1'
    api 'io.socket:engine.io-server-jetty:6.2.1'
    
    // Workflow & Scheduling
    api "org.quartz-scheduler:quartz:${quartzVersion}"
    api 'com.mchange:c3p0:0.10.1'
    api 'org.flowable:flowable-engine:7.0.1'
    api 'io.github.jamsesso:json-logic-java:1.0.7'
    api 'com.cronutils:cron-utils:9.2.1'
    
    // SAML
    api("com.onelogin:java-saml:${javaSamlVersion}") {
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
    }
    api("com.onelogin:java-saml-core:${javaSamlVersion}") {
        exclude group: 'javax.servlet', module: 'servlet-api'
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
    }
    api "org.apache.santuario:xmlsec:${xmlsecVersion}"
    
    // Other utilities
    api "net.jodah:expiringmap:${expiringMapVersion}"
    api "com.unboundid:unboundid-ldapsdk:${unboundSdkVersion}"
    api "org.bitbucket.cowwoc.diff-match-patch:diff-match-patch:${diffMatchVersion}"
    api "com.fasterxml.woodstox:woodstox-core:${woodstoxVersion}"
    api "org.yaml:snakeyaml:${snakeyamlVersion}"
    
    // Additional dependencies
    api "com.lmax:disruptor:3.4.4"
    api "io.github.resilience4j:resilience4j-retry:2.2.0"
    api "com.github.erosb:everit-json-schema:${everitVersion}"
    api "io.dropwizard.modules:dropwizard-web:3.0.1"
    api "com.networknt:json-schema-validator:1.5.2"
    api 'org.apache.felix:org.apache.felix.http.wrappers:1.1.8'
    api 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    api 'org.eclipse.parsson:parsson:1.1.5'
    
    // Missing dependencies for compilation
    api "org.springframework:spring-expression:${springVersion}"
    api 'javax.servlet:javax.servlet-api:4.0.1'
    api "io.modelcontextprotocol.sdk:mcp:${mcpSdkVersion}"
    api "com.smoketurner:dropwizard-swagger:${dropwizardSwaggerVersion}"
    
    // Test dependencies
    testImplementation "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
    testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:mysql:${testcontainersVersion}"
    testImplementation "org.testcontainers:elasticsearch:${testcontainersVersion}"
    testImplementation 'org.opensearch:opensearch-testcontainers:2.0.1'
    testImplementation "org.glassfish.jersey.connectors:jersey-apache-connector:${jerseyBomVersion}"
    testImplementation 'org.assertj:assertj-core:3.26.3'
    testImplementation('org.skyscreamer:jsonassert:1.5.1') {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    testImplementation 'org.apache.commons:commons-compress:1.27.1'
    testImplementation "io.github.artsok:rerunner-jupiter:2.1.6"
    testImplementation 'org.junit.platform:junit-platform-commons:1.9.3'
    testImplementation 'org.mockito:mockito-inline:5.2.0'

    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

// ANTLR configuration
generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ['-visitor', '-long-messages']
    outputDirectory = file("${buildDir}/generated-src/antlr/main")
}

compileJava.dependsOn generateGrammarSource
sourceSets.main.java.srcDirs += generateGrammarSource.outputDirectory

// Swagger generation
resolve {
    outputFileName = 'swagger'
    outputDir = file("${buildDir}/resources/main/assets")
    outputFormat = 'JSONANDYAML'
    classpath = sourceSets.main.runtimeClasspath
    resourcePackages = ['org.openmetadata.service.resources']
    prettyPrint = 'TRUE'
    openApiFile = file("${buildDir}/resources/main/assets/swagger.json")
}

// Version file generation
task generateVersionFile {
    doLast {
        def versionDir = file("${buildDir}/resources/main/catalog")
        versionDir.mkdirs()
        def versionFile = new File(versionDir, "VERSION")
        versionFile.text = "${project.version}\n"
    }
}

processResources.dependsOn generateVersionFile
// Don't make compileJava depend on resolve to avoid circular dependency
// resolve.dependsOn compileJava  // This happens automatically

// Test jar
task testJar(type: Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

artifacts {
    archives testJar
}

// Test configuration for different databases
test {
    systemProperty 'jdbcContainerClassName', 'org.testcontainers.containers.MySQLContainer'
    systemProperty 'jdbcContainerImage', 'mysql:8.3.0'
    systemProperty 'elasticSearchContainerClassName', 'docker.elastic.co/elasticsearch/elasticsearch:8.11.4'
    systemProperty 'openSearchContainerClassName', 'opensearchproject/opensearch:2.7.0'
    systemProperty 'runESTestCases', 'false'
    jvmArgs '-Xmx1G'
    maxParallelForks = 1
}

// PostgreSQL test configuration
task postgresTest(type: Test) {
    systemProperty 'jdbcContainerClassName', 'org.testcontainers.containers.PostgreSQLContainer'
    systemProperty 'jdbcContainerImage', 'postgres:15'
    systemProperty 'elasticSearchContainerClassName', 'docker.elastic.co/elasticsearch/elasticsearch:8.11.4'
    systemProperty 'openSearchContainerClassName', 'opensearchproject/opensearch:2.7.0'
    systemProperty 'runESTestCases', 'false'
    jvmArgs '-Xmx1G'
    maxParallelForks = 1
}

// Shaded JAR dependencies are handled by the 'builtBy' configuration above

// Fix task dependencies for ANTLR generation
sourcesJar.dependsOn generateGrammarSource